{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","console","log","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAXY,SAACC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCLdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,gDAEkCC,UAAWH,GAF7C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIGA,EAAKC,OAJR,uBAIXC,EAJW,EAIXA,KACRC,QAAQC,IAAIF,GAENG,EAAOH,EAAKI,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,iBAAiBd,QAXvB,kBAcZQ,GAdY,4CAAH,sDCDXO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMZ,EAAS,EAATA,IAElC,OACI,sBAAKgB,UAAU,2DAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAON,IACxB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SACrB,ECHwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBJ,OAhBIC,qBAAU,WACN1B,EAAQC,GACP0B,MAAM,SAAAC,GACHC,YAAW,WACPJ,EAAS,CACDjB,KAAKoB,EACLL,SAAQ,MAEd,UAER,CAACtB,IAMJuB,EDnB8BM,CAAa7B,GAAjCe,EAAb,EAAQR,KAAae,EAArB,EAAqBA,QAYrB,OACI,qCACA,oBAAIJ,UAAY,oCAAhB,SAAqDlB,IACpDsB,GAAW,mBAAGJ,UAAU,oCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aErBxBiB,EAAe,WAExB,MAAoC5C,mBAAS,CACzC,cADJ,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAWA,OACA,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACK8C,EAAWpB,KAAK,SAAAX,GAAQ,OACrB,cAAC,EAAD,CAEIA,SAAUA,GADHA,Y,MCnB3BgC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.4dcf1219.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setinputValue] = useState('');\n    \n    const handleinputChange = (e) =>{\n        setinputValue(e.target.value);\n    }\n    const handleSubmint = (e) =>{\n        e.preventDefault();\n        //console.log('Submint hecho')\n        if(inputValue.trim().length>2){\n        setCategories(cats => [inputValue,...cats]);\n        setinputValue('');\n        }\n    }\n    \n\n    return (\n        <form onSubmit={handleSubmint}>    \n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleinputChange}\n            />\n\n        </form>\n    \n    )\n}\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\n\n    export const getGifs = async( category) =>{\n\n        const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=12&api_key=fuFWVDEb0I312FNI5fN8LQkTwYPwBDdh`;\n        const resp = await fetch( url );\n        const { data }= await resp.json();\n        console.log(data);\n\n        const gifs = data.map( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }        \n        })\n        return gifs;\n    }","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    //console.log(id,title,url);\n    return (\n        <div className=\"card animate__animated animate__fadeIn animate__delay-2s\">\n            <img src={ url } alt = {title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\n//import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    const { data:images, loading } = useFetchGifs(category);\n    //const [images,setImages]= useState([]);\n    //const [count, setCount] = useState(0);\n    \n    //useEffect(()=>{\n    //    getGifs(category)\n    //    .then( setImages);\n    //},[category])\n\n\n    //getGifs();\n\n    return (\n        <>\n        <h3 className = \"animate__animated animate__bounce\">{category}</h3>\n        {loading && <p className=\"animate__animated animate__flash \"> Loading ..</p>}\n        <div className=\"card-grid\">\n                {\n                    images.map( img =>(\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n                        />                   \n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=> {\n        getGifs(category)\n        .then( imgs => {\n            setTimeout(()=>{\n                setState({\n                        data:imgs,\n                        loading:false\n                    });\n                },3000);\n            })\n        },[category])\n\n\n\n\n\nreturn state;\n}\n\n\n","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nexport const GifExpertApp = ()=>{\n    //const categories = ['Digimon', 'Dragon Ball', 'Pokemon'];\n    const [categories, setCategories] = useState([\n        'Spiderman'\n     //,'Dragon Ball', 'Pokemon'\n    ]);\n\n    //const handleAdd = () => {\n        //setCategories (['dota', ...categories]);\n        // or\n        //setCategories (cats => [...cats,'Dragon BallZ'])\n    //}\n\n    return(\n    <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={setCategories}/>\n        <hr/>\n        <ol>\n            {categories.map( category =>(\n                <GifGrid \n                    key = {category}\n                    category={category}\n                    />\n            ) \n            )}\n        </ol>\n\n\n    </>);\n}\n//export default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}